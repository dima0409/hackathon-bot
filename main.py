from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, error
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from telegram.constants import ChatAction
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage, FunctionMessage
from langchain_community.chat_models import GigaChat
from config import TELEGRAM_TOKEN, GIGACHAT_TOKEN
from easygoogletranslate import EasyGoogleTranslate
from googlesearch import search
from langchain.agents import AgentExecutor, create_gigachat_functions_agent
from langchain.tools import tool
from bs4 import BeautifulSoup
import requests, traceback
from typing import Optional, Union
import urllib.parse
import re
from langchain_community.document_loaders import UnstructuredURLLoader
from urllib3.exceptions import InsecureRequestWarning
import contextlib, warnings

old_merge_environment_settings = requests.Session.merge_environment_settings

@contextlib.contextmanager
def no_ssl_verification():
    opened_adapters = set()

    def merge_environment_settings(self, url, proxies, stream, verify, cert):
        opened_adapters.add(self.get_adapter(url))

        settings = old_merge_environment_settings(self, url, proxies, stream, verify, cert)
        settings['verify'] = False

        return settings

    requests.Session.merge_environment_settings = merge_environment_settings

    try:
        with warnings.catch_warnings():
            warnings.simplefilter('ignore', InsecureRequestWarning)
            yield
    finally:
        requests.Session.merge_environment_settings = old_merge_environment_settings

        for adapter in opened_adapters:
            try:
                adapter.close()
            except:
                pass

@tool
def url_loader(url: str) -> str:
  """
  –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç.

  Args:
    url: URL –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.

  Returns:
    –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã.
  """
  try:
    with no_ssl_verification():
        loader = UnstructuredURLLoader(urls=[url])
        data = loader.load()
        print(data)
        return data[0].page_content

  except requests.exceptions.RequestException as e:
    print(f"Error fetching URL: {e}")
    return None



@tool
def translate_function(query: str, from_lang: str = None, to_lang: str = "ru") -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Google Translate.

    Args:
        query (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
        from_lang (str, optional): –Ø–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        to_lang (str, optional): –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ("ru").

    Returns:
        str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

    Examples:
        >>> translate_function("Hello world", from_lang="en", to_lang="es")
        'Hola mundo'
        >>> translate_function("Bonjour le monde", to_lang="en")
        'Hello world'
    """
    return EasyGoogleTranslate(
        source_language=from_lang,
        target_language=to_lang,
        timeout=10
    ).translate(query)

@tool
def search_tool(query: str, lang: str = "ru") -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

    Args:
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        lang (str, optional): –Ø–∑—ã–∫ –ø–æ–∏—Å–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ("ru").

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
            –ö–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É.

    Examples:
        >>> search_tool("python programming")
        'Python Programming: Learn Python Programming - Free Interactive Python Tutorial: ... (https://www.programiz.com/python-programming)'
        'Python Programming: Learn Python Programming - Free Interactive Python Tutorial: ... (https://www.programiz.com/python-programming)'
        'Python Programming: Python Tutorial - Learn Python Programming ... (https://www.w3schools.com/python/)'
        'Python Programming: Learn Python | Codecademy: ... (https://www.codecademy.com/learn/learn-python)'
        'Python Programming: Python Tutorial - Learn Python for Beginners ... (https://www.guru99.com/python-tutorial.html)'
    """
    results = []

    for i in search(query, advanced=True, num_results=5, lang=lang):
        results.append(f"{i.title}: {i.description} ({urllib.parse.unquote(i.url)})")

    return "\n".join(results)

tools = [translate_function, search_tool, url_loader]

prompt = open("prompt.txt",'r').read()

chat = GigaChat(credentials=GIGACHAT_TOKEN, verify_ssl_certs=False)

agent = create_gigachat_functions_agent(chat, tools)

agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,
    verbose=True,
)

history = {}

async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("Info", callback_data='info')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!üßô‚Äç\nÔ∏è –Ø - –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç—Ç–æ–º —Ö–∞–∫–∞—Ç–æ–Ω–µ ‚Äú–ü–æ–¥–∑–µ–º–µ–ª—å—è –∏ –î—Ä–∞–∫–æ–Ω—ã‚Äù. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –±—É–¥—å —Ç–æ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ!', reply_markup=reply_markup)

async def info(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text='–¶–µ–ª—å –±–æ—Ç–∞: –Ø - –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç—Ç–æ–º —Ö–∞–∫–∞—Ç–æ–Ω–µ ‚Äú–ü–æ–¥–∑–µ–º–µ–ª—å—è –∏ –î—Ä–∞–∫–æ–Ω—ã‚Äù. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –±—É–¥—å —Ç–æ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É.\n'
                                       ' –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n `/start` ‚Äî –ó–∞–ø—É—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n `/clear` ‚Äî –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É).\n `/ai [–ø—Ä–æ–º—Ç]` ‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∏–≥–∞—á–∞—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: `/ai –ù–∞–ø–∏—à–∏ —à–∞–±–ª–æ–Ω –¥–ª—è Telegram-–±–æ—Ç–∞`.\n'
                                       ' –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ [ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub](https://github.com/dima0409/hackathon-bot)',parse_mode='markdown' )# info

def genai(uid, uname, user_input):
    if uid not in history.keys():
        history[uid] = [
          SystemMessage(
            content=prompt #"–¢—ã –±–æ—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ—á–Ω–æ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞."
          )
        ]
    form = f"{uname}: {user_input}"

    res = agent_executor.invoke(
    {
        "chat_history": history[uid],
        "input": form,
    }
    )['output']
    history[uid].append(HumanMessage(form))
    history[uid].append(AIMessage(res))
    print(user_input, res)

    return res

async def clear(update: Update, context: CallbackContext) -> None:
    if update.effective_chat.type == 'group':
        if not update.effective_user.is_bot:
            if update.effective_user.id not in [i.user.id for i in await update.effective_chat.get_administrators()]:
                await update.message.reply_text("–¢—ã –Ω–µ –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
                return

    if update.message.chat.id in history.keys():
        del history[update.message.chat.id]
    await update.message.reply_text("–û—á–∏—â–µ–Ω–æ!")

async def generate_ai_response(update: Update, context: CallbackContext) -> None:
    uid = update.message.chat.id
    uname = f"{update.effective_user.first_name} {update.effective_user.last_name} (–ù–∏–∫–Ω–µ–π–º)" if update.effective_chat.type == 'group' else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_input = update.message.text

    await context.bot.send_chat_action(chat_id=update.effective_message.chat_id, action=ChatAction.TYPING)
    res = genai(uid,uname,user_input)
    if len(res) == 0:
        await update.message.reply_text("GigaChat –æ—Ç–≤–µ—Ç–∏–ª –°–õ–ò–®–ö–û–ú –ª–∞–∫–æ–Ω–∏—á–Ω–æ")
        return
    try:
        await update.message.reply_text(res,parse_mode='html')
    except error.BadRequest as e:
        traceback.print_exception(e)
        await update.message.reply_text(res)
    except Exception as e:
        traceback.print_exception(e)
        await update.message.reply_text("—Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞")

async def cmdai(update: Update, context: CallbackContext) -> None:
    uid = update.message.chat.id
    uname = f"{update.effective_user.first_name} {update.effective_user.last_name} (–ù–∏–∫–Ω–µ–π–º)" if update.effective_chat.type == 'group' else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_input = " ".join(context.args)

    await context.bot.send_chat_action(chat_id=update.effective_message.chat_id, action=ChatAction.TYPING)
    res = genai(uid,uname,user_input)
    if len(res) == 0:
        await update.message.reply_text("GigaChat –æ—Ç–≤–µ—Ç–∏–ª –°–õ–ò–®–ö–û–ú –ª–∞–∫–æ–Ω–∏—á–Ω–æ")
        return
    try:
        await update.message.reply_text(res,parse_mode='html')
    except error.BadRequest as e:
        await update.message.reply_text(res)
    except Exception as e:
        await update.message.reply_text("—Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞")

async def post_init(application: Application) -> None:
    print(application.bot.username)

def main() -> None:
    updater = Application.builder().post_init(post_init).token(TELEGRAM_TOKEN).build()

    updater.add_handler(CommandHandler("start", start))
    updater.add_handler(CommandHandler("clear", clear))
    updater.add_handler(CommandHandler("ai", cmdai))
    updater.add_handler(CallbackQueryHandler(info, pattern='^' + 'info' + '$'))
    updater.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_ai_response))

    updater.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
